/* CSS Document */

/* Brings in Google font */
@import url(https://fonts.googleapis.com/css?family=Open+Sans:300,700|Open+Sans+Condensed:700);

#myCalculator { margin: 0; padding: 0; font-size: 16px; font-family: 'Open Sans', sans-serif; font-weight: 300; line-height: 24px; max-width: 800px; }

/* #444 = medium gray */
#myCalculator main { background-color: #444; }

/* #fff = white */
/* center on the x and 5px on the y */
/* background-size: proportionately scaled size for each of the light bulb graphics */
#myCalculator main section {
	width: 25%;
	float: left;
	text-align: center;
	padding-top: 110px;
	color: #fff;
	background-repeat: no-repeat;
	background-position: center 5px;
	background-size: 63px 100px;
}

/* have section elements inside the main element with 
the float properties, need to clear floats in main section */

/* after is a pseudo element 
need to give after some clear properties */
/* to get psuedo element to show up,
need to give it some content */
/* without content property, the display type
and clear won't show up or take effect.
That is why, set display to block and clear to both
*/
/* This way if there were any content inside 
main area outside of the sections, 
the main container will extend to encompass
all of the section elements because of the clear both
*/ 
#myCalculator main::after { content: ''; display: block; clear: both; }

/* For all sections we've already set the 
background repeat position and size, 
so we only need to set the color of the background and image*/
/* using red for incadescent */
/* red for halogen */
/* gold for cfl */
/* green for led */
#myCalculator main section.inc { background-color: #ba2d2d; background-image: url(images/bulb_inc.svg); }
#myCalculator main section.hal { background-color: #de6615; background-image: url(images/bulb_hal.svg); }
#myCalculator main section.cfl { background-color: #efc20f; background-image: url(images/bulb_cfl.svg); }
#myCalculator main section.led { background-color: #36b23c; background-image: url(images/bulb_led.svg); }

/* style each of the div elements inside each section
as well as the text */
/* > want to direct the div elements that are the direct
descendant of the section element */
/* if we had more that one div inside the section,
target only the main div container */
/* padding: 5 pixels on the top and bottom and 0 pixels on right and left */
/* background color: semi-transparent black so that area 
behind type is a little bit darker that the base color
Using the rgba color space for that
rgba need to specify red, green and blue and the alpha setting
So, 0 for red, 0 for green and 0 for blue
.15 for 15% opacity or 85% transparent. */
#myCalculator main section > div { padding: 5px 0; background-color: rgba(0,0,0,.15); }


/* rule that will target h4 elements */
#myCalculator main h4 {
	font-family: 'Open Sans Condensed', san-serif;
	font-size: .8em;
	letter-spacing: 1px;
	margin: 0 0 5px 0;
	text-transform: uppercase;
}

/* rule for paragraphs */
/* make use of the 700 weight style brought in from
Google Fonts */
#myCalculator main p { margin: 0; font-size: 1.5em; font-weight: 700; }

/* need price to be a little bit smaller that the wattage */
/* However, both are inside a paragraph element */
/* so, need to target a paragraph element if it 
follows another paragraph element */
/* Reset the font size, and set font-weight back to 300 */
#myCalculator main p + p { font-size: 1em; font-weight: 300; }

/* literally adding a w after every paragraph element inside
the paragraph element */
#myCalculator main p::after { content:'w'; }

/* put a $ before content in the second paragraph element */
#myCalculator main p + p::before { content:'$'; }

/* following will override pseudo element added after
paragraph element inside of main (2 lines above)
because this CSS rule is more specific */
/* Adds per year after amount
using color semi-transparent white
255, 255, 255, .5 : .5 means 50% transparent
padding-left: 4px adds 4 pixels to the left
*/
#myCalculator main p + p::after { content:'per year'; color: rgba(255,255,255,.5); padding-left: 4px; }

/* CSS rules to style the form area */
/* background-color: set to black */
/* margin set to 0 on all 4 sides
padding: 10px top and bottom and 0px right and left */
#myCalculator form {
	background-color: #000;
	margin: 0; padding: 10px 0px ;
}

/* target break tags added before */
/* on larger screens want break tags to be hidden, 
or set display to none */
#myCalculator form br { display: none; }

/* Targeting div elements inside of the form elements
set color to white 
width to 33%
set float property so these will line up horizontally
text-align to center
padding 10px for the top and 0 on the right 5px for the bottom and 0 on the left */
#myCalculator form > div {
	color: #fff;
	width: 33%;
	float: left;
	text-align: center;
	padding: 10px 0 5px 0;
}

/* Rule to clear the floats within the form element
Another pseudo element
set content to an empty string
set display type to block
clear property of both */
#myCalculator form::after { content:''; display: block; clear: both; }

/* targeting h4 headings inside the form area
color light grey
margin 0 on top, 0 on right, -5px on the bottom and 0 on the left */
#myCalculator form h4 {
	color: #aaa;
	margin: 0 0 -5px 0; font-size: 1.5em; font-weight: 300;
}

/* targeting paragraph elements 
color darker grey
margin 0 on top 0 on right 6px on the bottom, 0 on the left
font-size .9em */
#myCalculator form p { color: #888; margin: 0 0 6px 0; font-size: .9em; }

/* Style input fields
Using an attribute selector in CSS [type=number] */
#myCalculator form input[type=number] {
	width: 50px; text-align: left; font-size: 1em;
}

/* focus on the select menu
cannot style the pop-up that comes up when somebody clicks on the select element,
but we can style the element itself
take away the default browser style, and put in our own colors and artwork.
appearance removes the default browser styling or design
a lot of browsers are not supporting this natively.
-webkit-appearance targets Chrome and Safari
-moz-appearance targets Mozilla (Firefox)
-ms-appearance targets Microsoft (Internet Explorer)
-o-appearance targets Opera
When browsers support this natively, we can keep the appearance set to none, and will be able to remove all the browser flags.
background white use the file from images/icons_arrow.svg
	no-repeat
	position x property right
	position y property 6px
background-size width 30 px height 20px
padding 3px top 30 px right 3px bottom and 5px on the left
*/
/* type style inside of select menu matches the 
type style inside the input fields
Custom arrows have been brought in with the background property
default styling of browser for pop-up menu that comes up when clicking select */
#myCalculator form select {
	font-size: 1em;
	-webkit-appearance: none;
	-moz-appearance: none;
	-ms-appearance: none;
	-o-appearance: none;
	appearance: none;
	background: #fff url(images/icons_arrows.svg) no-repeat right 6px;
	background-size: 30px 20px;
	padding: 3px 30px 3px 5px;
}

/* Need one more rule specific to IE
pseudo element that will only be applied to IE
even though we set appearance to none, and
ms-appearance to none,
the arrows that IE puts on the select menu will 
still be drawn
*/
#myCalculator form select::-ms-expand { display: none; }

/* Adjusting the main area for small screens
add a media query and pick a size of 500px
use max-width 500px
all rules inside media query will only take effect if
the browser is less than 500px wide
font-size 15px will affect all elements inside the main 
myCalculator container
then target the section elements inside the main element:
these are the containers that are holding all of the lightbulb graphics:
setting background-size to 40px for width and 71px for height.  Since height is now only 71px, 
setting padding-top to 8px
then target h4 elements,
set margin to 0, font-size to .75em, and 
letter-spacing to 0 to take up less horizontal room
then target paragraph elements: this targets the wattage label
font-size to 1.1em
then target the price,
font-size to 1em
then target the pseudo class that was put inside of that paragraph element if it follows another paragraph element.  This is for per-year,
after targets the pseudo element
want per-year show up on its own line, so
change display type to block,
margin-top to -10px to decrease space between per year and price itself,
color set to full-white, were using a semi-transparent white since when font size gets a little smaller want to make sure type color is more readable on small screens.
*/

/* -----------------------------------------------------
Adjusting the form area for small screens
This still needs to be done inside the media query
target h4 elements inside the form area,
font-size to 1.1em and margin to 0 on all four sides
target form p,
bring line-height down to 14px
target break tags added in the form area,
want to control where the break points are happening,
set the display types to inline
target the input, need to target the type of number,
for this, need to use type=number,
bring width down to 30px and font-size down to .8em
target select element,
bring font size down, bring font-size down to .8em
*/
@media screen and (max-width:500px){
	/* for main area */
	#myCalculator { font-size: 15px; }
	#myCalculator main section { background-size: 45px 71px; padding-top: 80px; }
	#myCalculator main h4 { margin: 0; font-size: .75em; letter-spacing: 0; }
	#myCalculator main p { font-size: 1.1em; }
	#myCalculator main p + p { font-size: 1em; }
	#myCalculator main p + p::after { display: block; margin-top: -10px; color: #fff; }


	/* for form area */
	#myCalculator form h4 { font-size: 1.1em; margin: 0; }
	#myCalculator form p { font-size: .8em; line-height: 14px; }
	#myCalculator form br { display: inline; }
	#myCalculator form input[type=number] { width: 30px; font-size: .8em; }
	#myCalculator form select { font-size: .8em; }
}